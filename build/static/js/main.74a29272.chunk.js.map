{"version":3,"sources":["components/ProtectedRoute.js","firebase/firebase.js","actions/auth.js","components/Home.js","components/Login.js","App.js","reducers/index.js","reducers/auth.js","Root.js","configureStore.js","serviceWorker.js","index.js"],"names":["ProtectedRoute","Component","component","isAuthenticated","isVerifying","rest","render","props","to","pathname","state","from","location","myFirebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","receiveLogin","firestore","user","type","loginUser","email","password","dispatch","auth","signInWithEmailAndPassword","then","catch","error","logoutUser","signOut","Home","handleLogout","this","isLoggingOut","logoutError","onClick","connect","Login","handleEmailChange","target","setState","value","handlePasswordChange","handleSubmit","classes","loginError","Container","maxWidth","Paper","className","paper","Avatar","avatar","Typography","variant","TextField","margin","fullWidth","id","label","name","onChange","errorText","Button","color","submit","withStyles","body","backgroundColor","marginTop","display","padding","flexDirection","alignItems","marginLeft","marginRight","form","marginBottom","textAlign","isLoggingIn","exact","path","combineReducers","action","verifyingError","store","persistedState","createStore","rootReducer","applyMiddleware","thunkMiddleware","onAuthStateChanged","configureStore","Root","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.74a29272.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nconst ProtectedRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  isVerifying,\r\n  ...rest\r\n}) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      isVerifying ? (\r\n        <div />\r\n      ) : isAuthenticated ? (\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/login\",\r\n            state: { from: props.location }\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  />\r\n);\r\nexport default ProtectedRoute;","import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCCQPfNL6CHF9C31Al8ma16Yw5a6dQ0pZQ\",\r\n    authDomain: \"fire-react-de21e.firebaseapp.com\",\r\n    databaseURL: \"https://fire-react-de21e.firebaseio.com\",\r\n    projectId: \"fire-react-de21e\",\r\n    storageBucket: \"fire-react-de21e.appspot.com\",\r\n    messagingSenderId: \"200286969000\",\r\n    appId: \"1:200286969000:web:3d5ea9d33327bbd91d769d\",\r\n    measurementId: \"G-5BYWPTN32C\"\r\n};\r\nexport const myFirebase = firebase.initializeApp(firebaseConfig);\r\nconst baseDb = myFirebase.firestore();\r\nexport const db = baseDb;","import { myFirebase } from \"../firebase/firebase\";\r\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\r\nexport const VERIFY_REQUEST = \"VERIFY_REQUEST\";\r\nexport const VERIFY_SUCCESS = \"VERIFY_SUCCESS\";\r\n\r\nconst requestLogin = () => {\r\n    return {\r\n        type: LOGIN_REQUEST\r\n    };\r\n};\r\n\r\nconst receiveLogin = user => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        user\r\n    };\r\n};\r\n\r\nconst loginError = () => {\r\n    return {\r\n        type: LOGIN_FAILURE\r\n    };\r\n};\r\n\r\nconst requestLogout = () => {\r\n    return {\r\n        type: LOGOUT_REQUEST\r\n    };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n    return {\r\n        type: LOGOUT_SUCCESS\r\n    };\r\n};\r\n\r\nconst logoutError = () => {\r\n    return {\r\n        type: LOGOUT_FAILURE\r\n    };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n    return {\r\n        type: VERIFY_REQUEST\r\n    };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n    return {\r\n        type: VERIFY_SUCCESS\r\n    };\r\n};\r\n\r\nexport const loginUser = (email, password) => dispatch => {\r\n    dispatch(requestLogin());\r\n    myFirebase\r\n        .auth()\r\n        .signInWithEmailAndPassword(email, password)\r\n        .then(user => {\r\n            dispatch(receiveLogin(user));\r\n        })\r\n        .catch(error => {\r\n            //Do something with the error if you want!\r\n            dispatch(loginError());\r\n        });\r\n};\r\n\r\nexport const logoutUser = () => dispatch => {\r\n    dispatch(requestLogout());\r\n    myFirebase\r\n        .auth()\r\n        .signOut()\r\n        .then(() => {\r\n            dispatch(receiveLogout());\r\n        })\r\n        .catch(error => {\r\n            //Do something with the error if you want!\r\n            dispatch(logoutError());\r\n        });\r\n};\r\n\r\nexport const verifyAuth = () => dispatch => {\r\n    dispatch(verifyRequest());\r\n    myFirebase.auth().onAuthStateChanged(user => {\r\n        if (user !== null) {\r\n            dispatch(receiveLogin(user));\r\n        }\r\n        dispatch(verifySuccess());\r\n    });\r\n};","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { logoutUser } from \"../actions\";\r\nclass Home extends Component {\r\n  handleLogout = () => {\r\n    const { dispatch } = this.props;\r\n    dispatch(logoutUser());\r\n  };\r\n  render() {\r\n    const { isLoggingOut, logoutError } = this.props;\r\n    return (\r\n      <div>\r\n        <h1>This is your app's protected area.</h1>\r\n        <p>Any routes here will also be protected</p>\r\n        <button onClick={this.handleLogout}>Logout</button>\r\n        {isLoggingOut && <p>Logging Out....</p>}\r\n        {logoutError && <p>Error logging out</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoggingOut: state.auth.isLoggingOut,\r\n    logoutError: state.auth.logoutError\r\n  };\r\n}\r\nexport default connect(mapStateToProps)(Home);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginUser } from \"../actions\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst styles = () => ({\r\n  \"@global\": {\r\n    body: {\r\n      backgroundColor: \"#fff\"\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: 100,\r\n    display: \"flex\",\r\n    padding: 20,\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n    backgroundColor: \"#f50057\"\r\n  },\r\n  form: {\r\n    marginTop: 1\r\n  },\r\n  errorText: {\r\n    color: \"#f50057\",\r\n    marginBottom: 5,\r\n    textAlign: \"center\"\r\n  }\r\n});\r\n\r\nclass Login extends Component {\r\n  state = { email: \"\", password: \"\" };\r\n\r\n  handleEmailChange = ({ target }) => {\r\n    this.setState({ email: target.value });\r\n  };\r\n\r\n  handlePasswordChange = ({ target }) => {\r\n    this.setState({ password: target.value });\r\n  };\r\n\r\n  handleSubmit = () => {\r\n    const { dispatch } = this.props;\r\n    const { email, password } = this.state;\r\n\r\n    dispatch(loginUser(email, password));\r\n  };\r\n\r\n  render() {\r\n    const { classes, loginError, isAuthenticated } = this.props;\r\n    if (isAuthenticated) {\r\n      return <Redirect to=\"/\" />;\r\n    } else {\r\n      return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <Paper className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              onChange={this.handleEmailChange}\r\n            />\r\n            <TextField\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              onChange={this.handlePasswordChange}\r\n            />\r\n            {loginError && (\r\n              <Typography component=\"p\" className={classes.errorText}>\r\n                Incorrect email or password.\r\n              </Typography>\r\n            )}\r\n            <Button\r\n              type=\"button\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.submit}\r\n              onClick={this.handleSubmit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    isLoggingIn: state.auth.isLoggingIn,\r\n    loginError: state.auth.loginError,\r\n    isAuthenticated: state.auth.isAuthenticated\r\n  };\r\n}\r\n\r\nexport default withStyles(styles)(connect(mapStateToProps)(Login));","import React from \"react\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport Home from \"./components/Home\";\nimport Login from \"./components/Login\";\n\nfunction App(props) {\n  const { isAuthenticated, isVerifying } = props;\n  return (\n    <Switch>\n      <ProtectedRoute\n        exact\n        path=\"/\"\n        component={Home}\n        isAuthenticated={isAuthenticated}\n        isVerifying={isVerifying}\n      />\n      <Route path=\"/login\" component={Login} />\n    </Switch>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isAuthenticated: state.auth.isAuthenticated,\n    isVerifying: state.auth.isVerifying\n  };\n}\n\nexport default connect(mapStateToProps)(App);","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\n\r\nexport default combineReducers({ auth });","import {\r\n    LOGIN_REQUEST,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILURE,\r\n    LOGOUT_REQUEST,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAILURE,\r\n    VERIFY_REQUEST,\r\n    VERIFY_SUCCESS\r\n} from \"../actions/\";\r\n\r\nexport default (\r\n    state = {\r\n        isLoggingIn: false,\r\n        isLoggingOut: false,\r\n        isVerifying: false,\r\n        loginError: false,\r\n        logoutError: false,\r\n        isAuthenticated: false,\r\n        user: {}\r\n    },\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n        case LOGIN_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: true,\r\n                loginError: false\r\n            };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isAuthenticated: true,\r\n                user: action.user\r\n            };\r\n        case LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingIn: false,\r\n                isAuthenticated: false,\r\n                loginError: true\r\n            };\r\n        case LOGOUT_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: true,\r\n                logoutError: false\r\n            };\r\n        case LOGOUT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                isAuthenticated: false,\r\n                user: {}\r\n            };\r\n        case LOGOUT_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoggingOut: false,\r\n                logoutError: true\r\n            };\r\n        case VERIFY_REQUEST:\r\n            return {\r\n                ...state,\r\n                isVerifying: true,\r\n                verifyingError: false\r\n            };\r\n        case VERIFY_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isVerifying: false\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from \"react\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport configureStore from \"./configureStore\";\r\n\r\nconst store = configureStore();\r\n\r\nfunction Root() {\r\n    return ( < Provider store = { store } >\r\n        <Router >\r\n        <App />\r\n        </Router> </Provider >\r\n    );\r\n}\r\n\r\nexport default Root;","import { applyMiddleware, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { verifyAuth } from \"./actions/\";\r\nimport rootReducer from \"./reducers\";\r\nexport default function configureStore(persistedState) {\r\n    const store = createStore(\r\n        rootReducer,\r\n        persistedState,\r\n        applyMiddleware(thunkMiddleware)\r\n    );\r\n    store.dispatch(verifyAuth());\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}